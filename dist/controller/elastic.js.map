{"version":3,"sources":["../../src/controller/elastic.js"],"names":["require","Client","client","node","finalConfig","ELASTIC_URL","userMapping","activityMapping","insertUser","user","indexStr","username","logger","info","haveIndex","indices","exists","index","debug","create","body","mappings","settings","undefined","error","type","refresh","JSON","stringify","console","log","insertActivity","activity","indexExists","ElasticService","indexTable","saveUser","saveActivity"],"mappings":"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","sourcesContent":["import { logger } from '../logger'\r\nconst { Client } = require('@elastic/elasticsearch')\r\nimport {finalConfig} from '../../config'\r\n\r\nconst client = new Client({\r\n    node: finalConfig.ELASTIC_URL\r\n})\r\n\r\nconst userMapping = {\r\n    \"properties\": {\r\n        \"username\": {\r\n            \"type\": \"text\"\r\n        },\r\n        \"text\":{\r\n            \"type\": \"text\"\r\n        }\r\n    }\r\n};\r\n\r\nconst activityMapping = {\r\n    \"properties\": {\r\n        \"username\": {\r\n            \"type\": \"text\"\r\n        },\r\n        \"location\":{\r\n            \"properties\": {\r\n                \"coordinates\":{\r\n                    \"type\": 'geo_point'\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nasync function insertUser(user){\r\n    let indexStr = `user-${user.username}`;\r\n    logger.info(user)\r\n    let haveIndex = false;\r\n    try{\r\n        if(!await client.indices.exists({index: indexStr})){\r\n            logger.debug(`try create index: [${indexStr}]`);\r\n            await client.indices.create({\r\n                index: indexStr,\r\n                body: {\r\n                    mappings:userMapping,\r\n                    settings: {}\r\n                }\r\n            });\r\n            logger.info(`create index: [${indexStr}] success`);\r\n        }\r\n        haveIndex = true;\r\n    }\r\n    catch(err){\r\n        if(err.body !== undefined && err.body.error !== undefined){\r\n            if(err.body.error.type === 'resource_already_exists_exception'){\r\n                haveIndex = true;\r\n                logger.debug(`create index: [${indexStr}] already exist`);\r\n            }\r\n            else{\r\n                logger.info(\"cannot create index: \",err.body);\r\n            }\r\n        }\r\n        else{\r\n            logger.error(\"error is undefined\"+ err);\r\n        }\r\n        \r\n    }\r\n    if(haveIndex){\r\n        try{\r\n            await client.index({\r\n                index: indexStr,\r\n                type: '_doc',\r\n                refresh: true,\r\n                body: user\r\n            });\r\n            logger.debug(\"insert user: \"+JSON.stringify(user)+\" success\");\r\n        }\r\n        catch(err){\r\n            console.log(\"from elastic\",JSON.stringify(err))\r\n            logger.error(\"cannot insert user: \",err.body.error.type);\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nasync function insertActivity(activity){\r\n    let indexStr = `activity-${activity.username}`;\r\n    logger.info('activity', activity)\r\n    let haveIndex = false;\r\n    try{\r\n        const indexExists = await client.indices.exists({index: indexStr})\r\n        haveIndex = indexExists.body\r\n        if(!haveIndex){\r\n            logger.debug(`try create index: [${indexStr}]`);\r\n            await client.indices.create({\r\n                index: indexStr,\r\n                body: {\r\n                    mappings:activityMapping,\r\n                    settings: {}\r\n                }\r\n            });\r\n            logger.info(`create index: [${indexStr}] success`);\r\n            haveIndex = true\r\n        }\r\n    }\r\n    catch(err){\r\n        if(err.body !== undefined && err.body.error !== undefined){\r\n            if(err.body.error.type === 'resource_already_exists_exception'){\r\n                haveIndex = true;\r\n                logger.debug(`create index: [${indexStr}] already exist`);\r\n            }\r\n            else{\r\n                logger.info(\"cannot create index: \",err.body);\r\n            }\r\n        }\r\n        else{\r\n            logger.error(\"error is undefined\"+ err);\r\n        }\r\n        \r\n    }\r\n    if(haveIndex){\r\n        try{\r\n            await client.index({\r\n                index: indexStr,\r\n                type: '_doc',\r\n                refresh: true,\r\n                body: activity\r\n            });\r\n            logger.debug(\"insert activity: \"+JSON.stringify(activity)+\" success\");\r\n        }\r\n        catch(err){\r\n            console.log(\"from elastic\",JSON.stringify(err))\r\n            logger.error(\"cannot insert activity: \",err.body.error.type);\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nclass ElasticService {\r\n    constructor() {\r\n        this.indexTable = {};\r\n        this.saveUser = insertUser;\r\n        this.saveActivity = insertActivity;\r\n        //this.update = elastic_update;\r\n\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    ElasticService\r\n};"],"file":"elastic.js"}