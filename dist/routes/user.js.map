{"version":3,"sources":["../../src/routes/user.js"],"names":["router","dal","DALController","elastic","ElasticService","userColl","mongoose","model","userModel","findAll","filter","sort","limit","coll","res","then","docs","logger","debug","status","send","err","error","message","get","req","info","render","params","id","users","put","findOneAndUpdate","post","JSON","stringify","body","newUser","save","forEach","doc","_id","username","text","module","exports"],"mappings":"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","sourcesContent":["import {Router} from 'express'\r\nimport mongoose from 'mongoose'\r\nimport userModel from '../models'\r\nimport {DALController} from '../controller'\r\nimport { logger } from '../logger';\r\nimport { ElasticService } from '../controller/elastic'\r\n\r\nconst router = Router()\r\nconst dal = new DALController()\r\nconst elastic = new ElasticService()\r\nconst userColl = mongoose.model('user', userModel)\r\n\r\nfunction findAll(filter, sort, limit, coll, res){\r\n  dal.findAll(filter, sort, limit, coll)\r\n  .then((docs) => {\r\n    logger.debug(docs)\r\n    res.status(200).send(docs)\r\n  })\r\n  .catch((err)=>{\r\n    logger.error(err)\r\n    res.status(500).send(err.message)\r\n  })\r\n}\r\n\r\nrouter.get('/', (req, res) => {\r\n  logger.info(`GET /user`)\r\n  findAll({}, {'_id': 'desc'}, null, userColl, res)\r\n})\r\n\r\nrouter.get('/test', (req,res) => {\r\n  res.render('index')\r\n})\r\n\r\nrouter.get('/:id', (req, res) => {\r\n  // findAll({'_id': req.params.id}, {'_id': 'desc'}, 1, userColl, res)\r\n  logger.info(`GET /user/${req.params.id}`)\r\n  dal.findAll({'_id': req.params.id}, {'_id': 'desc'}, 1, userColl)\r\n  .then((docs) => {\r\n    logger.debug(docs)\r\n    res.render('all', {users: docs})\r\n  })\r\n  .catch((err)=>{\r\n    logger.error(err)\r\n    res.status(500).send(err.message)\r\n  })\r\n})\r\n\r\nrouter.put('/:id', (req, res) => {\r\n  logger.info(`PUT /user/${req.params.id}`)\r\n  dal.findOneAndUpdate({'_id': req.params.id}, {'name': 'test deprecate'}, {'new': true}, userColl)\r\n  .then((docs) => {\r\n    logger.debug(docs)\r\n    res.status(200).send(docs)\r\n  })\r\n  .catch((err)=>{\r\n    logger.error(err)\r\n    res.status(500).send(err.message)\r\n  })\r\n})\r\n\r\nrouter.post('/', (req, res) => {\r\n  logger.info(`POST /user`)\r\n  logger.info(`req : ${JSON.stringify(req.body)}`)\r\n  const newUser = new userColl(req.body)\r\n\r\n  dal.save(newUser)\r\n  .then((docs) => {\r\n    logger.debug(docs)\r\n    res.status(200).send(docs)\r\n    elastic.save(req.body)\r\n  })\r\n  .catch((err)=>{\r\n    logger.error(err)\r\n    res.status(500).send(err.message)\r\n  })\r\n})\r\n\r\nrouter.post('/getUserById', (req, res) => {\r\n  logger.info(`POST /getUserByID`)\r\n  logger.info(`req : ${req.body.id}`)\r\n  dal.findAll({'_id': req.body.id}, {'_id': 'desc'}, null, userColl)\r\n  .then((docs) => {\r\n    logger.debug(docs)\r\n    let users = '<table><thead><td>id</td><td>name</td><td>text</td></thead><tbody>'\r\n    docs.forEach(doc => {\r\n      users += '<tr><td>'+doc._id+'</td><td>'+doc.username+'</td><td>'+doc.text+'</td></tr>'\r\n    });\r\n    users += '</tbody></table>'\r\n    res.status(200).send(users)\r\n  })\r\n  .catch((err)=>{\r\n    logger.info(err)\r\n    res.status(500).send(err.message)\r\n  })\r\n})\r\n\r\nmodule.exports = router"],"file":"user.js"}