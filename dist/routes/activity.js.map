{"version":3,"sources":["../../src/routes/activity.js"],"names":["router","dal","DALController","elastic","ElasticService","activityColl","mongoose","model","activityModel","findAll","filter","sort","limit","coll","res","then","docs","logger","debug","status","send","err","error","message","get","req","info","post","JSON","stringify","body","newactivity","save","saveActivity","module","exports"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,MAAM,GAAG,sBAAf;AACA,IAAMC,GAAG,GAAG,IAAIC,yBAAJ,EAAZ;AACA,IAAMC,OAAO,GAAG,IAAIC,uBAAJ,EAAhB;;AACA,IAAMC,YAAY,GAAGC,qBAASC,KAAT,CAAe,UAAf,EAA2BC,kBAA3B,CAArB;;AAEA,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,IAAtC,EAA4CC,GAA5C,EAAgD;AAC9Cb,EAAAA,GAAG,CAACQ,OAAJ,CAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,IAAjC,EACCE,IADD,CACM,UAACC,IAAD,EAAU;AACdC,mBAAOC,KAAP,CAAaF,IAAb;;AACAF,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,IAArB;AACD,GAJD,WAKO,UAACK,GAAD,EAAO;AACZJ,mBAAOK,KAAP,CAAaD,GAAb;;AACAP,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,GAAG,CAACE,OAAzB;AACD,GARD;AASD;;AAEDvB,MAAM,CAACwB,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMX,GAAN,EAAc;AAC5BG,iBAAOS,IAAP;;AACAjB,EAAAA,OAAO,CAAC,EAAD,EAAK;AAAC,WAAO;AAAR,GAAL,EAAsB,IAAtB,EAA4BJ,YAA5B,EAA0CS,GAA1C,CAAP;AACD,CAHD;AAKAd,MAAM,CAAC2B,IAAP,CAAY,GAAZ,EAAiB,UAACF,GAAD,EAAMX,GAAN,EAAc;AAC7BG,iBAAOS,IAAP;;AACAT,iBAAOS,IAAP,iBAAqBE,IAAI,CAACC,SAAL,CAAeJ,GAAG,CAACK,IAAnB,CAArB;;AACA,MAAMC,WAAW,GAAG,IAAI1B,YAAJ,CAAiBoB,GAAG,CAACK,IAArB,CAApB;AAEA7B,EAAAA,GAAG,CAAC+B,IAAJ,CAASD,WAAT,EACChB,IADD,CACM,UAACC,IAAD,EAAU;AACdC,mBAAOC,KAAP,CAAaF,IAAb;;AACAF,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,IAArB;AACAb,IAAAA,OAAO,CAAC8B,YAAR,CAAqBR,GAAG,CAACK,IAAzB;AACD,GALD,WAMO,UAACT,GAAD,EAAO;AACZJ,mBAAOK,KAAP,CAAaD,GAAb;;AACAP,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,GAAG,CAACE,OAAzB;AACD,GATD;AAUD,CAfD;AAiBAW,MAAM,CAACC,OAAP,GAAiBnC,MAAjB","sourcesContent":["import {Router} from 'express'\r\nimport mongoose from 'mongoose'\r\nimport activityModel from '../models'\r\nimport {DALController} from '../controller'\r\nimport { logger } from '../logger';\r\nimport { ElasticService } from '../controller/elastic'\r\n\r\nconst router = Router()\r\nconst dal = new DALController()\r\nconst elastic = new ElasticService()\r\nconst activityColl = mongoose.model('activity', activityModel)\r\n\r\nfunction findAll(filter, sort, limit, coll, res){\r\n  dal.findAll(filter, sort, limit, coll)\r\n  .then((docs) => {\r\n    logger.debug(docs)\r\n    res.status(200).send(docs)\r\n  })\r\n  .catch((err)=>{\r\n    logger.error(err)\r\n    res.status(500).send(err.message)\r\n  })\r\n}\r\n\r\nrouter.get('/', (req, res) => {\r\n  logger.info(`GET /activity`)\r\n  findAll({}, {'_id': 'desc'}, null, activityColl, res)\r\n})\r\n\r\nrouter.post('/', (req, res) => {\r\n  logger.info(`POST /activity`)\r\n  logger.info(`req : ${JSON.stringify(req.body)}`)\r\n  const newactivity = new activityColl(req.body)\r\n\r\n  dal.save(newactivity)\r\n  .then((docs) => {\r\n    logger.debug(docs)\r\n    res.status(200).send(docs)\r\n    elastic.saveActivity(req.body)\r\n  })\r\n  .catch((err)=>{\r\n    logger.error(err)\r\n    res.status(500).send(err.message)\r\n  })\r\n})\r\n\r\nmodule.exports = router"],"file":"activity.js"}